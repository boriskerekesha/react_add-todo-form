{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","title","completed","classNames","TodoList","todosItems","map","todo","key","todos","userId","usersFromServer","find","App","useState","setTitle","userName","setUserName","setTodosItems","isSubmit","setIsSubmit","isVisibleTittleError","setIsVisibleTittleError","useEffect","action","method","onSubmit","event","preventDefault","correctTitle","trim","replace","length","maxId","Math","max","apply","elem","selectedUser","newTodo","currentTodos","alert","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"6MAAe,G,MAAA,CACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,4B,uBCzDEC,EAAmC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAC9C,mBAAGC,UAAU,WAAWC,KAAI,wBAAYF,QAAZ,IAAYA,OAAZ,EAAYA,EAAMF,OAA9C,gBACGE,QADH,IACGA,OADH,EACGA,EAAMJ,QCCEO,EAA2B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOJ,EAAV,EAAUA,KAAMK,EAAhB,EAAgBA,UAAhB,OACtC,0BACEJ,UAAWK,IACT,WACA,CAAE,sBAAuBD,IAH7B,UAME,oBAAIJ,UAAU,kBAAd,SACGG,IAEH,cAAC,EAAD,CAAUJ,KAAMA,QCXPO,EAAiC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC/C,OACE,yBAASP,UAAU,WAAnB,SACGO,EAAWC,KAAI,SAAAC,GAAI,OAClB,wBAAC,EAAD,2BAAcA,GAAd,IAAoBC,IAAKD,EAAKf,YCQtC,IAAMiB,EChBS,CACb,CACEjB,GAAI,EACJS,MAAO,qBACPC,WAAW,EACXQ,OAAQ,GAEV,CACElB,GAAI,GACJS,MAAO,kBACPC,WAAW,EACXQ,OAAQ,GAEV,CACElB,GAAI,EACJS,MAAO,qCACPC,WAAW,EACXQ,OAAQ,IDD0BJ,KAAI,SAAAC,GAAI,kCACzCA,GADyC,IAE5CV,MARea,EAQDH,EAAKG,OAPDC,EAAgBC,MAAK,SAAAf,GAAI,OAAIA,EAAKL,KAAOkB,MAEvC,QAHtB,IAAiBA,KAWJG,EAAgB,WAC3B,MAA0BC,mBAAS,IAAnC,mBAAOb,EAAP,KAAcc,EAAd,KACA,EAAgCD,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,mBAASL,GAA7C,mBAAOJ,EAAP,KAAmBa,EAAnB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAwDN,oBAAS,GAAjE,mBAAOO,EAAP,KAA6BC,EAA7B,KAEAC,qBAAU,WACRD,GAAwB,KACvB,CAACrB,IA2CJ,OACE,sBAAKH,UAAU,MAAf,UACE,+CAEA,uBACE0B,OAAO,aACPC,OAAO,OACPC,SAhDgB,SAACC,GAIrB,GAHAA,EAAMC,iBACNR,GAAY,GAEPnB,GAAUe,EAAf,CAMA,IAAMa,EAAe5B,EAAM6B,OAAOC,QAAQ,uCAAyB,IAEnE,GAAKF,EAAaG,OAAlB,CAOA,IAAMC,EAAQC,KAAKC,IAAIC,MAAM,KAAM/B,EAAWC,KAAI,SAAC+B,GAAD,OAAUA,EAAK7C,OAC3D8C,EAAe3B,EAAgBC,MAAK,SAACf,GAAD,OACxCA,EAAKJ,OAASuB,KAGVuB,EAAU,CACd/C,GAAIyC,EAAQ,EACZhC,MAAO4B,EACPnB,QAAoB,OAAZ4B,QAAY,IAAZA,OAAA,EAAAA,EAAc9C,KAAM,KAC5BU,WAAW,EACXL,KAAMyC,GAAgB,MAGxBpB,GAAc,SAACsB,GAAD,4BACTA,GADS,CAEZD,OAEFxB,EAAS,IACTE,EAAY,IACZG,GAAY,QAxBVqB,MAAM,mEATNnB,GAAwB,IAwCxB,UAKE,sBAAKxB,UAAU,QAAf,UACE,uBAAO4C,QAAQ,cAAf,mBAGA,uBACEC,KAAK,OACL,UAAQ,aACRnD,GAAG,cACHoD,YAAY,gBACZC,MAAO5C,EACP6C,SAAU,SAACnB,GAAD,OAAWZ,EAASY,EAAMoB,OAAOF,WAE3C5C,GAASoB,GACT,sBAAMvB,UAAU,QAAhB,qCAMJ,sBAAKA,UAAU,QAAf,UACE,uBAAO4C,QAAQ,aAAf,kBAGA,yBACE,UAAQ,aACRlD,GAAG,aACHqD,MAAO7B,EACP8B,SAAU,SAACnB,GAAD,OAAWV,EAAYU,EAAMoB,OAAOF,QAJhD,UAME,wBACEA,MAAM,GACNG,UAAQ,EAFV,2BAMCrC,EAAgBL,KAAI,SAACT,GAAD,OACnB,wBAAsBgD,MAAOhD,EAAKJ,KAAlC,SACGI,EAAKJ,MADKI,EAAKL,UAOrB2B,IAAaH,GACZ,sBAAMlB,UAAU,QAAhB,qCAMJ,wBAAQ6C,KAAK,SAAS,UAAQ,eAA9B,oBAIF,cAAC,EAAD,CAAUtC,WAAYA,QErI5B4C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c9d5d147.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { UserInfoType } from '../../types/UserInfoType';\n\nexport const UserInfo: React.FC<UserInfoType> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\nexport const TodoInfo: React.FC<Todo> = ({ title, user, completed }) => (\n  <article\n    className={classNames(\n      'TodoInfo',\n      { 'TodoInfo--completed': completed },\n    )}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {title}\n    </h2>\n    <UserInfo user={user} />\n  </article>\n);\n","import React from 'react';\nimport { TodosItems } from '../../types/TodoItems';\nimport { TodoInfo } from '../TodoInfo';\n\nexport const TodoList: React.FC<TodosItems> = ({ todosItems }) => {\n  return (\n    <section className=\"TodoList\">\n      {todosItems.map(todo => (\n        <TodoInfo {...todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\n\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [userName, setUserName] = useState('');\n  const [todosItems, setTodosItems] = useState(todos);\n  const [isSubmit, setIsSubmit] = useState(false);\n  const [isVisibleTittleError, setIsVisibleTittleError] = useState(false);\n\n  useEffect(() => {\n    setIsVisibleTittleError(false);\n  }, [title]);\n\n  const handlerSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setIsSubmit(true);\n\n    if (!title || !userName) {\n      setIsVisibleTittleError(true);\n\n      return;\n    }\n\n    const correctTitle = title.trim().replace(/[^\\d\\sA-Za-zA-ЯА-я]/gi, '');\n\n    if (!correctTitle.length) {\n      // eslint-disable-next-line no-alert\n      alert('Title can contains letters (ru and en), digits, and spaces');\n\n      return;\n    }\n\n    const maxId = Math.max.apply(null, todosItems.map((elem) => elem.id));\n    const selectedUser = usersFromServer.find((user) => (\n      user.name === userName\n    ));\n\n    const newTodo = {\n      id: maxId + 1,\n      title: correctTitle,\n      userId: selectedUser?.id || null,\n      completed: false,\n      user: selectedUser || null,\n    };\n\n    setTodosItems((currentTodos) => [\n      ...currentTodos,\n      newTodo,\n    ]);\n    setTitle('');\n    setUserName('');\n    setIsSubmit(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handlerSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title-input\">\n            Title\n          </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"title-input\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => setTitle(event.target.value)}\n          />\n          {!title && isVisibleTittleError && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user-input\">\n            User\n          </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user-input\"\n            value={userName}\n            onChange={(event) => setUserName(event.target.value)}\n          >\n            <option\n              value=\"\"\n              disabled\n            >\n              Choose a user\n            </option>\n            {usersFromServer.map((user) => (\n              <option key={user.id} value={user.name}>\n                {user.name}\n              </option>\n\n            ))}\n          </select>\n\n          {isSubmit && !userName && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todosItems={todosItems} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}